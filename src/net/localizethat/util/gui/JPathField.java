/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package net.localizethat.util.gui;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author  rpalomares
 */
public class JPathField extends javax.swing.JPanel {
    /**
     * Indicates if the file chooser allows directories instead of files
     */
    private boolean selectDirs;

    /**
     * The file chooser dialog title
     */
    private String dialogTitle;

    /**
     * A list of FileFilter instances to apply to the FileChooser
     */
    List<FileFilter> fileFilters;

    /** Default constructor */
    public JPathField() {
        super();
        initComponents();
        fileFilters = new ArrayList<>(5);
    }
    
    /**
     * Constructor with a FileFilter
     * @param ff the FileFilter for the FileChooser
     */
    public JPathField(FileFilter ff) {
        this();
        fileFilters.add(ff);
    }

    /**
     * Constructor with a FileFilter
     * @param ffList a list of FileFilter instances for the FileChooser
     */
    public JPathField(FileFilter... ffList) {
        this();
        fileFilters.addAll(Arrays.asList(ffList));
    }

    /**
     * Adds a FileFilter to the component to be applied to the FileChooser
     * @param ff
     */
    public void addFileFilter(FileFilter ff) {
        fileFilters.add(ff);
    }

    /**
     * Removes a FileFilter from the FileChooser
     * @param ff the FileFilter to be removed
     */
    public void removeFileFilter(FileFilter ff) {
        fileFilters.remove(ff);
    }
    
    /**
     * Gets the selected file as indicated in the text field (which may be different from the last
     * selected one in the file chooser)
     * @return the File object defined in the text field, or null if no file exists with that pathname
     */
    public File getSelectedFile() {
        File f = new File(pathTField.getText());

        if (f.exists()) {
            return f;
        } else {
            return null;
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pathTField = new javax.swing.JTextField();
        choosePathButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(19, 19));
        setPreferredSize(new java.awt.Dimension(90, 19));
        setLayout(new java.awt.BorderLayout());

        pathTField.setMinimumSize(new java.awt.Dimension(4, 20));
        pathTField.setPreferredSize(new java.awt.Dimension(64, 20));
        add(pathTField, java.awt.BorderLayout.CENTER);

        choosePathButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        choosePathButton.setText("...");
        choosePathButton.setToolTipText("Choose path/file");
        choosePathButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        choosePathButton.setMinimumSize(new java.awt.Dimension(19, 19));
        choosePathButton.setPreferredSize(new java.awt.Dimension(19, 19));
        choosePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosePathButtonActionPerformed(evt);
            }
        });
        add(choosePathButton, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    private void choosePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosePathButtonActionPerformed
        final JFileChooser fc = new JFileChooser(pathTField.getText());
        int result;
        
        for(FileFilter ff : fileFilters) {
            fc.addChoosableFileFilter(ff);
        }
        fc.setDialogTitle(getDialogTitle());
        fc.setFileSelectionMode((isSelectDirs()) ? JFileChooser.DIRECTORIES_ONLY:
                                                   JFileChooser.FILES_ONLY);
        
        result = fc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            pathTField.setText(fc.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_choosePathButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton choosePathButton;
    private javax.swing.JTextField pathTField;
    // End of variables declaration//GEN-END:variables

    /**
     * Getter for property text.
     * @return Value of property text.
     */
    public String getText() {
        return pathTField.getText();
    }

    /**
     * Setter for property text.
     * @param text New value of property text.
     */
    public void setText(final String text) {
        pathTField.setText(text);
    }

    /**
     * Getter for property selectDirs.
     * @return Value of property selectDirs.
     */
    public boolean isSelectDirs() {
        return this.selectDirs;
    }

    /**
     * Setter for property selectDirs.
     * @param selectDirs New value of property selectDirs.
     */
    public void setSelectDirs(final boolean selectDirs) {
        this.selectDirs = selectDirs;
    }

    /**
     * Getter for property dialogTitle.
     * @return Value of property dialogTitle.
     */
    public String getDialogTitle() {
        return this.dialogTitle;
    }

    /**
     * Setter for property dialogTitle.
     * @param dialogTitle New value of property dialogTitle.
     */
    public void setDialogTitle(final String dialogTitle) {
        this.dialogTitle = dialogTitle;
    }
}
